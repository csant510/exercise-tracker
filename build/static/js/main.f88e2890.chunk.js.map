{"version":3,"sources":["components/NavBar/NavBar.jsx","utils/tokenService.js","utils/userService.js","components/SignupForm/SignupForm.jsx","pages/SignupPage/SignupPage.js","pages/LoginPage/LoginPage.jsx","pages/App/App.js","serviceWorker.js","index.js"],"names":["NavBar","props","nav","user","className","to","onClick","handleLogout","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","placeholder","getToken","token","localStorage","getItem","JSON","parse","atob","split","exp","Date","now","removeItem","setToken","setItem","removeToken","getUserFromToken","BASE_URL","signup","fetch","method","headers","Headers","body","stringify","then","res","ok","json","Error","tokenService","getUser","logout","login","creds","SignupForm","state","username","email","password","passwordConf","handleChange","e","updateMessage","setState","target","name","value","handleSubmit","a","preventDefault","userService","handleSignupOrLogin","history","push","message","this","onSubmit","onChange","disabled","isFormInvalid","React","Component","SignupPage","msg","LoginPage","pw","alert","App","console","log","exact","path","render","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f88e2890.chunk.js","sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom';\n\nconst NavBar = (props) => {\n    let nav = props.user ?\n        <>\n            <li className=\"nav-item\">\n            <Link to='/'><span className=\"nav-link\">Profile</span></Link>\n            </li>\n            <li className=\"nav-item\">\n                <Link to=''><span className=\"nav-link\" onClick={props.handleLogout}>Log Out</span></Link>\n            </li>\n        </>\n        :\n        <>\n            <li className=\"nav-item\">\n                <Link to='/signup'><span className=\"nav-link\">Sign Up</span></Link>\n            </li>\n            <li className=\"nav-item\">\n                <Link to='/login'><span className=\"nav-link\">Log In</span></Link>\n            </li>\n        </>;\n\n    return (\n        <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\n            <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarTogglerDemo03\" aria-controls=\"navbarTogglerDemo03\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n                <span className=\"navbar-toggler-icon\"></span>\n            </button>\n            <Link to='/'><span className=\"navbar-brand\">MovieGuy</span></Link>\n            <div className=\"collapse navbar-collapse\" id=\"navbarTogglerDemo03\">\n                <ul className=\"navbar-nav mr-auto mt-2 mt-lg-0\">\n                    <li className=\"nav-item\">\n                        <Link to='/'><span className=\"nav-link\">Most Popular</span></Link>\n                    </li>\n                    <li className=\"nav-item\">\n                        <Link to='/'><span className=\"nav-link\">Current Playing</span></Link>\n                    </li>\n                    {nav}\n                </ul>\n                <form className=\"form-inline my-2 my-lg-0\">\n                    <input className=\"form-control mr-sm-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\" />\n                    <button className=\"btn btn-outline-success my-2 my-sm-0\" type=\"submit\">Search</button>\n                </form>\n            </div>\n        </nav>\n    )\n}\n\nexport default NavBar;","function setToken(token) {\n    if (token) {\n      localStorage.setItem('token', token);\n    } else {\n      localStorage.removeItem('token');\n    }\n  }\n  \n  function getToken() {\n    let token = localStorage.getItem('token');\n    if (token) {\n      // Check if expired, remove if it is\n      const payload = JSON.parse(atob(token.split('.')[1]));\n      // JWT's exp is expressed in seconds, not milliseconds, so convert\n      if (payload.exp < Date.now() / 1000) {\n        localStorage.removeItem('token');\n        token = null;\n      }\n    }\n    return token;\n  }\n  \n  function getUserFromToken() {\n    const token = getToken();\n    return token ? JSON.parse(atob(token.split('.')[1])).user : null;\n  }\n  \n  function removeToken() {\n    localStorage.removeItem('token');\n  }\n  \n  export default {\n    setToken,\n    getToken,\n    removeToken,\n    getUserFromToken\n  };","import tokenService from './tokenService';\n\nconst BASE_URL = '/api/users/';\n\nfunction signup(user) {\n  return fetch(BASE_URL + 'signup', {\n    method: 'POST',\n    headers: new Headers({'Content-Type': 'application/json'}),\n    body: JSON.stringify(user)\n  })\n  .then(res => {\n    if (res.ok) return res.json();\n    // Probably a duplicate email\n    throw new Error('Email already taken!');\n  })\n  // Parameter destructuring!\n  .then(({token}) => tokenService.setToken(token));\n  // The above could have been written as\n  //.then((token) => token.token);\n}\n\nfunction getUser() {\n  return tokenService.getUserFromToken();\n}\n\nfunction logout() {\n  tokenService.removeToken();\n}\n\nfunction login(creds) {\n  return fetch(BASE_URL + 'login', {\n    method: 'POST',\n    headers: new Headers({'Content-Type': 'application/json'}),\n    body: JSON.stringify(creds)\n  })\n  .then(res => {\n    // Valid login if we have a status of 2xx (res.ok)\n    if (res.ok) return res.json();\n    throw new Error('Bad Credentials!');\n  })\n  .then(({token}) => tokenService.setToken(token));\n}\n\nexport default {\n  signup, \n  getUser,\n  logout,\n  login\n};","import React from 'react';\nimport userService from '../../utils/userService';\n\nclass SignupForm extends React.Component {\n\n    state = {\n        username: '',\n        email: '',\n        password: '',\n        passwordConf: ''\n    };\n\n    handleChange = (e) => {\n            this.props.updateMessage('');\n            this.setState({\n              // Using ES2015 Computed Property Names\n              [e.target.name]: e.target.value\n            });\n    }\n\n    handleSubmit = async (e) => {\n        e.preventDefault();\n        try {\n          await userService.signup(this.state);\n          // Let <App> know a user has signed up!\n          this.props.handleSignupOrLogin();\n          // Successfully signed up - show GamePage\n          this.props.history.push('/');\n        } catch (err) {\n          // Invalid user data (probably duplicate email)\n          this.props.updateMessage(err.message);\n        }\n      }\n\n    isFormInvalid() {\n            return !(this.state.username && this.state.email && this.state.password === this.state.passwordConf);\n    }\n\n    render() {\n        return (\n            <div className=\"mt-5\">\n                <form onSubmit={this.handleSubmit}>\n                    <div className=\"form-row mt-3 justify-content-md-center\">\n                        <div className=\"col-md-4\">\n                            <input type=\"text\" className=\"form-control\" placeholder=\"Name\" value={this.state.username} name=\"username\" onChange={this.handleChange} />\n                        </div>\n                    </div>\n                    <div className=\"form-row mt-3 justify-content-md-center\">\n                        <div className=\"col-md-4\">\n                            <input type=\"email\" className=\"form-control\" placeholder=\"Email\" value={this.state.email} name=\"email\" onChange={this.handleChange} />\n                        </div>\n                    </div>\n                    <div className=\"form-row mt-3 justify-content-md-center\">\n                        <div className=\"col-md-4\">\n                            <input type=\"password\" className=\"form-control\" placeholder=\"Password\" value={this.state.password} name=\"password\" onChange={this.handleChange} />\n                        </div>\n                    </div>\n                    <div className=\"form-row mt-3 justify-content-md-center\">\n                        <div className=\"col-md-4\">\n                            <input type=\"password\" className=\"form-control\" placeholder=\"Confirm Password\" value={this.state.passwordConf} name=\"passwordConf\" onChange={this.handleChange} />\n                        </div>\n                    </div>\n                    <div className=\"form-row mt-3 justify-content-md-center\">\n                        <div className=\"col-md-4 justify\">\n                            <button className=\"btn btn-outline-info\" disabled={this.isFormInvalid()}>Sign Up</button>&nbsp;&nbsp;\n                        </div>\n                    </div>\n                </form>\n            </div>\n        );\n    }\n}\n\nexport default SignupForm;","import React, { Component } from 'react';\nimport SignupForm from '../../components/SignupForm/SignupForm';\n\nclass SignupPage extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {message: ''}\n  }\n\n  updateMessage = (msg) => {\n    this.setState({message: msg});\n  }\n\n  render() {\n    return (\n      <div>\n        <SignupForm {...this.props} updateMessage={this.updateMessage} />\n        <p>{this.state.message}</p>\n      </div>\n    );\n  }\n}\n\nexport default SignupPage;","import React from 'react';\nimport userService from '../../utils/userService';\n\nclass LoginPage extends React.Component {\n\n    state = {\n        email: '',\n        pw: ''\n    };\n\n    handleChange = (e) => {\n        this.setState({\n        // Using ES2015 Computed Property Names\n            [e.target.name]: e.target.value\n        });\n    }\n\n    handleSubmit = async (e) => {\n        e.preventDefault();\n        try {\n            await userService.login(this.state);\n            // // Let <App> know a user has signed up!\n            this.props.handleSignupOrLogin();\n            // // Successfully signed up - show GamePage\n            this.props.history.push('/');\n        } catch (err) {\n            // Use a modal or toast in your apps instead of alert\n            alert('Invalid Credentials!');\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"mt-5\">\n                <form onSubmit={this.handleSubmit}>\n                    <div className=\"form-row mt-3 justify-content-md-center\">\n                        <div className=\"col-md-4\">\n                            <input type=\"email\" className=\"form-control\" placeholder=\"Email\" value={this.state.email} name=\"email\" onChange={this.handleChange} />\n                        </div>\n                    </div>\n                    <div className=\"form-row mt-3 justify-content-md-center\">\n                        <div className=\"col-md-4\">\n                            <input type=\"password\" className=\"form-control\" placeholder=\"Password\" value={this.state.pw} name=\"pw\" onChange={this.handleChange} />\n                        </div>\n                    </div>\n                    <div className=\"form-row mt-3 justify-content-md-center\">\n                        <div className=\"col-md-4 justify\">\n                            <button className=\"btn btn-outline-info\">Login</button>&nbsp;&nbsp;\n                        </div>\n                    </div>\n                </form>\n            </div>\n        );\n    }\n}\n\nexport default LoginPage;","import React from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport NavBar from '../../components/NavBar/NavBar';\nimport SignupPage from '../../pages/SignupPage/SignupPage';\nimport LoginPage from '../../pages/LoginPage/LoginPage';\nimport userService from '../../utils/userService';\n\nclass App extends React.Component {\n\n  constructor() {\n    super();\n    this.state = {\n      // Initialize user if there's a token, otherwise null\n      user: userService.getUser()\n    };\n  }\n\n  handleLogout = () => {\n    userService.logout();\n    console.log('user log out!')\n    this.setState({ user: null });\n  }\n\n  handleSignupOrLogin = () => {\n    console.log('handlesinguporlogin');\n    this.setState({user: userService.getUser()});\n  }\n\n  render() {\n    return (\n      <Router>\n        <div className=\"container\">\n          <NavBar user={this.state.user} handleLogout={this.handleLogout} />\n          <Switch>\n            <Route exact path='/signup' render={({ history }) =>\n              <SignupPage\n                history={history}\n                handleSignupOrLogin={this.handleSignupOrLogin}\n              />\n            } />\n            <Route exact path='/login' render={({ history }) =>\n              <LoginPage\n                history={history}\n                handleSignupOrLogin={this.handleSignupOrLogin}\n              />\n            } />\n          </Switch>\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import './index.css';\nimport App from './pages/App/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n// import ‘bootstrap/dist/js/bootstrap‘;\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}